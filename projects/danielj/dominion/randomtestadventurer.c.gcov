        -:    0:Source:randomtestadventurer.c
        -:    0:Graph:randomtestadventurer.gcno
        -:    0:Data:randomtestadventurer.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/**************************** 
        -:    2:Author: James Daniel
        -:    3:Assignment #4 
        -:    4:Random test for Adventurer
        -:    5:****************************/
        -:    6:
        -:    7:#include <string.h>
        -:    8:#include <stdio.h>
        -:    9:#include <math.h>
        -:   10:#include <stdlib.h>
        -:   11:#include <assert.h>
        -:   12:#include "dominion.h"
        -:   13:#include "dominion_helpers.h"
        -:   14:#include "rngs.h"
        -:   15:#define NUM_TESTS 1000
        -:   16:#define NUM_CARDS treasure_map
        -:   17:
function main called 1 returned 0% blocks executed 61%
        1:   18:int main()
        -:   19:{
        -:   20:	int deck_treasures, hand_count, player, numPlayers, pre_count, post_count, seed, i, j;
        1:   21:	int k[10] = {baron,curse, copper, duchy, estate, province, smithy, treasure_map, minion, steward};
        -:   22:	
        1:   23:	srand(time(NULL));   
call    0 returned 100%
call    1 returned 100%
        -:   24:	struct gameState game;
        -:   25:	
        1:   26:	printf("--------------------Begin Random Test Adventurer--------------------\n");	
call    0 returned 100%
        -:   27:	
        -:   28:	//main loop
        1:   29:	for(i = 0;i < NUM_TESTS; i++)
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        -:   30:	{ 
        1:   31:		pre_count = 0; 
        1:   32:		post_count = 0;
        -:   33:		//generate random players
        1:   34:		numPlayers = rand() % 3 + 2;
call    0 returned 100%
        1:   35:		seed = rand() % 100;	
call    0 returned 100%
        -:   36:		//initialize game
        1:   37:		if(initializeGame(numPlayers, k, seed, &game) == -1)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:   38:		{ 
    #####:   39:			printf("Error: Cannot initialize game\n");
call    0 never executed
    #####:   40:			exit(0);
call    0 never executed
        -:   41:		}
        -:   42:		//generate a random player 
        1:   43:		player = rand() % numPlayers; 
call    0 returned 100%
        1:   44:		game.whoseTurn = player;
        1:   45:		game.numActions = 1;
        1:   46:		game.handCount[player] = 5;
        1:   47:		game.deckCount[player] = rand() % MAX_HAND;
call    0 returned 100%
        1:   48:		game.discardCount[player] = 0;
        -:   49:		
        -:   50:		//generate a deck by random
      173:   51:		for(j = 0; j < game.deckCount[player]; j++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   52:		{
      172:   53:			game.deck[player][j] = rand() % NUM_CARDS;
call    0 returned 100%
      172:   54:			if(game.deck[player][j] >= copper && game.deck[player][j] <= gold)
branch  0 taken 84% (fallthrough)
branch  1 taken 16%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:   55:			{ 
       15:   56:				deck_treasures++;
        -:   57:			}
        -:   58:		}
        -:   59:		//generate a hand by random
        6:   60:		for(j = 0; j < game.handCount[player]; j++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:   61:		{	
        5:   62:			game.hand[player][j] = rand() % NUM_CARDS;
call    0 returned 100%
        5:   63:			if(game.hand[player][j] >= copper && game.hand[player][j] <= gold)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   64:			{ 
    #####:   65:				pre_count++;	
        -:   66:			}
        -:   67:		}
        -:   68:		//play adventurer card
        1:   69:		game.hand[player][0] = adventurer; 
        1:   70:		hand_count = game.handCount[player];
        1:   71:		playCard(0, 0, 0, 0, &game);
call    0 returned 100%
        -:   72:		
        -:   73:		//2 cards should have been placed in users hand
        1:   74:		if(hand_count + 2 != game.handCount[player])
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   75:		{
        1:   76:			printf("Test fail: Unable to put 2 cards into players hand\n");
call    0 returned 100%
        1:   77:			printf("--------------------Exiting Random Test Adventurer--------------------\n");
call    0 returned 100%
        1:   78:			exit(0);	
call    0 returned 0%
        -:   79:		}
        -:   80:		
    #####:   81:		for(j = 0; j < game.handCount[player]; j++)
branch  0 never executed
branch  1 never executed
        -:   82:		{
    #####:   83:			if(game.hand[player][j] >= copper && game.hand[player][j] <= gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   84:					post_count++;
        -:   85:		}
    #####:   86:		printf("Before: %d\n", pre_count);
call    0 never executed
    #####:   87:		printf("After: %d\n", post_count);
call    0 never executed
        -:   88:		
    #####:   89:		if(pre_count + 2 != post_count)
branch  0 never executed
branch  1 never executed
        -:   90:		{
    #####:   91:			printf("Test fail: Unable to put put 2 cards into players hand\n");
call    0 never executed
    #####:   92:			printf("--------------------Exiting Random Test Adventurer--------------------\n");
call    0 never executed
    #####:   93:			exit(0);	
call    0 never executed
        -:   94:		}
    #####:   95:		printf("Tests #%d: \n", i);
call    0 never executed
        -:   96:		
        -:   97:	}
    #####:   98:	printf("--------------------Finished Random Test Adventurer--------------------\n");	
call    0 never executed
    #####:   99:	return 0;
        -:  100:}
