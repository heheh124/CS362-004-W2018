        -:    0:Source:randomtestcard2.c
        -:    0:Graph:randomtestcard2.gcno
        -:    0:Data:randomtestcard2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/**************************** 
        -:    2:Author: James Daniel
        -:    3:Assignment #4 
        -:    4:Random test for Village
        -:    5:****************************/
        -:    6:
        -:    7:#include <string.h>
        -:    8:#include <stdio.h>
        -:    9:#include <math.h>
        -:   10:#include <stdlib.h>
        -:   11:#include <assert.h>
        -:   12:#include "dominion.h"
        -:   13:#include "dominion_helpers.h"
        -:   14:#include "rngs.h"
        -:   15:#define NUM_TESTS 1000
        -:   16:
function main called 1 returned 100% blocks executed 96%
        1:   17:int main() 
        -:   18:{
        1:   19:	int players, player, postEffect, seed, i, r, errors = 0, initial = 0, pass = 0, fail = 0;
        1:   20:	int k[10] = {adventurer, cutpurse, embargo, gardens, mine, minion, sea_hag, smithy, tribute, village}; 
        -:   21:	struct gameState game;
        -:   22:	struct gameState temp; 
        -:   23:
        1:   24:	printf("--------------------Begin Random Test Village--------------------\n");
call    0 returned 100%
        -:   25:	
        1:   26:	srand(time(NULL));
call    0 returned 100%
call    1 returned 100%
        -:   27:	
        -:   28:	//main loop
     1001:   29:	for (i = 0; i < NUM_TESTS; i++) 
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   30:	{
        -:   31:		//generate random players
        -:   32:		do {
     2015:   33:			players = rand() % 4;
call    0 returned 100%
     2015:   34:		} while (players < 2);
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        -:   35:
        -:   36:		//random seed
     1000:   37:		seed = rand();
call    0 returned 100%
        -:   38:		//initialize game
     1000:   39:		initializeGame(players, k, seed, &game);	
call    0 returned 100%
        -:   40:
        -:   41:		do {
     1790:   42:			player = rand() % players; 
call    0 returned 100%
     1790:   43:		} while (player == 0);	
branch  0 taken 44%
branch  1 taken 56% (fallthrough)
        -:   44:
        -:   45:		//initiate valid state variables
     1000:   46:		game.whoseTurn = player;
        -:   47:		//generate random deck size
     1000:   48:		game.deckCount[player] = rand() % MAX_DECK;
call    0 returned 100%
     1000:   49:		game.discardCount[player] = rand() % MAX_DECK;
call    0 returned 100%
     1000:   50:		game.handCount[player] = rand() % MAX_HAND;
call    0 returned 100%
     1000:   51:		game.hand[player][0] = village;
     1000:   52:		game.numActions = rand() % 10;		
call    0 returned 100%
     1000:   53:		memcpy(&temp, &game, sizeof(struct gameState));
        -:   54:		
        -:   55:		//play village card
     1000:   56:		r = cardEffect(village, 0, 0, 0, &game, 0, 0);
call    0 returned 100%
     1000:   57:		assert (r == 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
     1000:   58:		postEffect = game.handCount[player];
        -:   59:		
     1000:   60:		if(postEffect == initial + 1)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:   61:		{
        4:   62:			pass += 1;}
        -:   63:		else
        -:   64:		{
      996:   65:			fail += 1;}
        -:   66:		/*
        -:   67:		//count errors
        -:   68:		if(game.deckCount[player] != (temp.deckCount[player] - 1)) 
        -:   69:		{ 
        -:   70:			errors++; 
        -:   71:		}
        -:   72:		//2 more actions for village
        -:   73:		if(game.numActions != (temp.numActions + 2)) 
        -:   74:		{ 
        -:   75:			errors++; 
        -:   76:		}*/
        -:   77:
        -:   78:	}	
        -:   79:	//printf("Errors: %d\n", errors);
        1:   80:	printf("%d tests out of %d passed.\n", pass, NUM_TESTS);
call    0 returned 100%
        1:   81:	printf("--------------------Finished Random Test Village--------------------\n");
call    0 returned 100%
        1:   82:	return 0;
        -:   83:}
